searchState.loadedDescShard("bitflag_attr", 0, "Generate types for C-style flags with ergonomic APIs using …\nA value with all bits set.\nThe underlying bits type.\nPrimitive types that can be used with <code>bitflag</code> attribute …\nA value with all bits unset.\nExtra possible bits values for the flags.\nA set of defined flags using a bits type as storage.\nThe set of named defined flags.\nConstruct a flag value with all known flags set.\nReturns a flag value that contains all value.\nAn attribute macro that transforms an C-like enum into a …\nA macro that matches flags values, similar to Rust’s …\nReturn the underlying bits of this bitflag.\nResets the flags to a empty state.\nReturns the complement of the value.\nReturns <code>true</code> if this flag value contains all values of …\nReturns <code>true</code> if there are any unknown bits set in the flag …\nReturns the difference from this value with <code>other</code>.\nConstruct a flag value with all bits unset.\nExample of the generated code by the <code>bitflag</code> macro.\nConverts from a <code>bits</code> value. Returning <code>None</code> is any unknown …\nConvert from <code>bits</code> value exactly.\nConvert from <code>bits</code> value, unsetting any unknown bits.\nConvert from a flag <code>name</code>.\nGet a flags value with the bits of a flag with the given …\nReturns the intersection from this value with <code>other</code>.\nReturns <code>true</code> if this flag value intersects with any value …\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the bitflag contains all value bits set.\nReturns <code>true</code> if the flag value has all bits unset.\nYield the bits of a source flags value in a set of …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nParsing flags from text.\nSet the flags in <code>other</code> in the value.\nReturns the symmetric difference from this value with <code>other</code>…\nToggle the flags in <code>other</code> in the value.\nRemove any unknown bits from the flags.\nReturns a bit flag that only has bits corresponding to the …\nReturns the union from this value with <code>other</code>.\nUnset the flags bits in <code>other</code> in the value.\nA example bitflag\nConstruct a flag value with all known flags set.\nReturns a flag value that contains all value.\nReturns the bitwise AND of the flag.\nReturn the underlying bits of this bitflag.\nReturns the complement of the value.\nReturns <code>true</code> if this flag value contains all values of …\nReturns <code>true</code> if there are any unknown bits set in the flag …\nReturns the difference from this value with <code>other</code>.\nConstruct a flags value with all bits unset.\nSet all flags of <code>iter</code> to self\nReturns the argument unchanged.\nConverts from a <code>bits</code> value. Returning <code>None</code> is any unknown …\nConvert from <code>bits</code> value exactly.\nConvert from <code>bits</code> value, unsetting any unknown bits.\nConvert from a flag <code>name</code>.\nCreate a <code>ExampleFlags</code> from a iterator of flags.\nReturns the intersection from this value with <code>other</code>.\nReturns <code>true</code> if this flag value intersects with any value …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the flag value contais all known flags.\nReturns <code>true</code> if the flag value contains all value bits set.\nReturns <code>true</code> if the flag value has all bits unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns the bitwise NOT of the flag.\nReturns the bitwise OR of the flag with <code>other</code>.\nSet the flags in <code>other</code> in the value.\nThe intersection of a source flag with the complement of a …\nThe intersection of a source flag with the complement of a …\nReturns the symmetric difference from this value with <code>other</code>…\nToggle the flags in <code>other</code> in the value.\nRemoves unknown bits from the flag value.\nReturns a bit flag that only has bits corresponding to the …\nReturns the union from this value with <code>other</code>.\nUnset the flags bits in <code>other</code> in the value.\nReturns the bitwise XOR of the flag with <code>other</code>.\nAn iterator over flags values.\nAn iterator over flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a flags value of any remaining bits that haven’t …\nAn error encountered while parsing flags from text.\nParse a value from a hex string.\nA hex or named flag wasn’t found between separators.\nReturns the argument unchanged.\nParse a flags value from text.\nParse a flags value from text.\nParse a flags value from text.\nCalls <code>U::from(self)</code>.\nAn invalid hex flag was encountered.\nA named flag that doesn’t correspond to any on the flags …\nParse the value from hex.\nWrite a flags value as text.\nWrite only the contained, defined, named flags in a flags …\nWrite a flags value as text, ignoring any unknown bits.")